#+LaTeX_HEADER:\usepackage[margin=2cm]{geometry}
#+LaTeX_HEADER:\usepackage{enumitem}
#+LaTeX_HEADER:\renewcommand{\ttdefault}{pcr}
#+LaTeX_HEADER:\lstdefinelanguage{yaml}{basicstyle=\ttfamily\scriptsize,frame=lrtb,framerule=1pt,framexleftmargin=1pt,showstringspaces=false}
#+LaTeX_HEADER:\usepackage{etoolbox}
#+LaTeX_HEADER:\makeatletter\patchcmd{\@verbatim}{\verbatim@font}{\verbatim@font\scriptsize}{}{}\makeatother
#+LATEX:\setitemize{noitemsep,topsep=0pt,parsep=0pt,partopsep=0pt}
#+OPTIONS: toc:nil author:nil ^:nil

#+TITLE: L7MP: A L7 Multiprotocol Proxy and Service Mesh

/[L7mp is currently under construction, with many advertised features untested, not working as promised, or completely missing.]/

L7mp is a Layer-7, multiprotocol service proxy and a service mesh framework. The emphasis is on
"multiprotocol" support, in order to let l7mp to handle lots of transport- and application-layer
network protocols natively, beyond the usual TCP/HTTP, and transparently convert between different
protocol encapsulations. The intention is for l7mp to serve as an incubator project to prototype
the main service mesh features to support legacy/non-HTTP applications seamlessly.

The distribution contains an /l7mp proxy/ component, a programmable proxy that can stitch an
arbitrary number of application-level traffic streams together into an end-to-end stream in a
protocol-agnostic manner (e.g., you can pipe a UNIX domain socket to a WebSocket stream and vice
versa), and a /service mesh/ component, in the form of a Kubernetes operator that can manage a
legion of l7mp gateway and sidecar proxy instances seamlessly to enforce a rich set of high-level
traffic management and observability policies throughout an entire cluster.

** The l7mp proxy

The l7mp proxy is modeled after [[https://github.com/envoyproxy/envoy][Envoy]], in that it uses similar abstractions (Listeners, Clusters,
etc.), but in contrast to Envoy that is mostly HTTP/TCP-centric l7mp is optimized for persistent,
long-lived UDP-based media and tunneling protocol streams. The l7mp proxy features an extended
routing API, which allows to transparently pipe sessions across diverse protocol encapsulations,
with automatic and transparent protocol transformation, native support for datagram- and
byte-streams, stream multiplexing/demultiplexing, encapsulation/decapsulation, etc.

Considering the strong emphasis on multiprotocol support, the l7mp proxy may actually be closer in
nature to =socat(1)= than to Envoy, but it is dynamically configurable via a REST API in contrast
to =socat(1)= which is a static CLI tool (while =socat= it is much more feature-complete in
return).

The l7mp proxy is written in Javascript/node.js. This way, it is much simpler and easier to extend
than Envoy or =socat=, but at the same time it is also much slower. It does not have to be that way
though; an XDP/ebpf-based proxy-acceleration framework is under construction that would enable l7mp
to run at hundreds of thousands of packets per second speed.

** The l7mp service mesh

The l7mp distribution contains a Kubernetes operator that makes it possible to deploy and configure
multiple instances of l7mp as sidecar proxies and service/API gateways, in a framework that can be
best described as a multiprotocol service mesh. The operator is currently under construction, more
details to follow soon.

* Installation

The below should eventually work fine, once l7mp gets open-sourced.

#+BEGIN_SRC sh
npm install l7mp --save
#+END_SRC

Until then, use the enclosed Dockerfile to deploy l7mp. At least Node.js v14 is required.

* Usage example

** Run

Run l7mp locally with a [[https://github.com/rg0now/l7mp/blob/master/config/l7mp-minimal.yaml][sample]] static configuration.

#+BEGIN_SRC sh
node l7mp-proxy.js -c config/l7mp-minimal.yaml -l warn -s
#+END_SRC

Configuration is accepted either in YAML format (if the extension is =.yaml=) or JSON (otherwise).
Command line arguments override static configuration parameters.

** Query configuration

The sample configuration will fire up a HTTP listener at port 1234 and route it to the l7mp
controller that serves the l7mp REST API.  This API can be used to query or configure the proxy on
the fly; e.g., the below will dump the full configuration in JSON format:

#+BEGIN_SRC sh
curl http://localhost:1234/api/v1/config
#+END_SRC

** Manage sessions

On top of the static configuration, the response contains a new =sessions= list that enumerates the
set of active (connected) sessions in l7mp. You can list the live sessions explicitly as follows:

#+BEGIN_SRC sh
curl http://localhost:1234/api/v1/sessions
#+END_SRC

You should see only a single HTTP session: this session was created by the l7mp proxy to route the
REST API query from the HTTP listener to the controller and this session happens to be active when
the session list request is issued.

You can also delete any session (suppose its name is =session-name=) via the below REST API call.

#+BEGIN_SRC sh
curl -iX DELETE http://localhost:1234/api/v1/sessions/<session-name>
#+END_SRC

** Add a new cluster

Add a new WebSocket cluster named =ws-cluster= that will connect to a WebSocket server at
=localhost:16000=.

#+BEGIN_SRC sh
curl -iX POST --header 'Content-Type:text/x-yaml' --data-binary @- <<EOF  http://localhost:1234/api/v1/clusters
cluster:
  name: ws-cluster
  spec: { protocol: "WebSocket", port: 16000 }
  endpoints:
    - spec: { address:  "127.0.0.1" }
EOF
#+END_SRC

Note that the REST API accepts both JSON and YAML configs (YAML will be converted to JSON
internally). If multiple endpoints are added, l7mp will load-balance among these.

** Add a new listener and a route

Now add a new UDP listener called =udp-listener= at port 15000 that will accept connections with
source port 15001 and route the received connections to the above cluster (named =ws-cluster=).

#+BEGIN_SRC sh
curl -iX POST --header 'Content-Type:text/x-yaml' --data-binary @- <<EOF  http://localhost:1234/api/v1/listeners
listener:
  name: udp-listener
  spec: { protocol: UDP, port: 15000, connect: {port: 15001} }
  rules:
    - action:
        route:
          destination: ws-cluster
          ingress:
            - spec: { protocol: Logger }
          retry: {retry_on: always, num_retries: 3, timeout: 2000}
EOF
#+END_SRC

There is an important quirk here. The =route= in the above REST API call specifies a new cluster
embedded into the route definition (the one with the protocol =Logger=); this is a special
transport cluster that will instruct l7mp to log all traffic arriving from the listener to the
standard output. Of course, we could have added this cluster in a separate REST API call as well:

#+BEGIN_SRC sh
curl -iX POST --header 'Content-Type:text/x-yaml' --data-binary @- <<EOF  http://localhost:1234/api/v1/clusters
cluster:
  name: logger-cluster
  spec: { protocol: "Logger" }
EOF
#+END_SRC

And then let the listener to simply refer to this cluster by name:

#+BEGIN_SRC sh
curl -iX POST --header 'Content-Type:text/x-yaml' --data-binary @- <<EOF  http://localhost:1234/api/v1/listeners
listener:
  name: udp-listener
  spec: { protocol: UDP, port: 15000, connect: {port: 15001} }
  rules:
    - action:
        route:
          destination: ws-cluster
          ingress:
            - logger-cluster
          retry: {retry_on: always, num_retries: 3, timeout: 2000}
EOF
#+END_SRC

This flexibility of l7mp to accept explicit and implicit (embedded) configurations is available in
essentially all REST API calls and greatly simplifies the use of the API.

** Routing

On session creation, l7mp will demultiplex the bidirectional stream at the listener into two
uni-directional streams: the /ingress stream/ (in the direction from the listener to the cluster)
will be routed through the =Logger= cluster, which could then readily transform the stream and send
the results back (for now, the =Logger= cluster just dumps the content of the stream without
transforming it in any ways but you get the point).  The returned stream is then piped to the
cluster =ws-cluster=.  In the /egress direction/ (from the cluster back to the listener), no
transformation occurs as the egress chain spec is missing.

The ingress and the egress routes are specified and handled separately.  Both routes can contain a
list of any number of transformer clusters that will be chained sequentially, automatically
performing transparent protocol and payload conversion along the way. Note that datagram boundaries
are preserved during transformation whenever possible, and when it is not (i.e., piping a UDP
stream to a TCP cluster will lose segmentation), l7mp issues a warning.

This should yield the routes:

: ingress: udp-listener -> logger-cluster -> ws-cluster
: egress:  ws-cluster -> udp-listener

** Retries and timeouts

Route specifications can contain a =retry= spec, in order to describe what to do when one of the
connected clusters fail. By the above spec, l7mp will automatically retry the connection at most 3
times both on connection setup errors and disconnect events, waiting each time 2000 ms for the
stream to be successfully re-established.

** Test the connection

To complete the connection, fire up a =socat(1)= sender (don't forget to bind the sender to 15001,
otherwise l7mp, which connects back to this port, will not accept the connection):

#+BEGIN_SRC sh
socat - udp:localhost:15000,sourceport=15001
#+END_SRC

Then, start a [[https://github.com/vi/websocat][=websocat=]] receiver:

#+BEGIN_SRC sh
websocat -Eb ws-l:127.0.0.1:16000 -
#+END_SRC

What you type in the sender should appear at the receiver and the l7mp proxy should report
everything that passes from the sender to the receiver on the standard output.  Note that in the
reverse direction, i.e., from the receiver to the sender nothing will be logged, since the =Logger=
was added to the /ingress route/ only but not to the /egress route/.

** Clean up

Provided that the new session is named =session-name= (l7mp automatically assigns a unique name to
each session, you can check this by issuing a GET request to the API endpoint =/api/v1/sessions=),
you can delete the session, the cluster and the listener as follows:

#+BEGIN_SRC sh
curl -iX DELETE http://localhost:1234/api/v1/sessions/<session-name>
curl -iX DELETE http://localhost:1234/api/v1/listeners/user-1-2-l
curl -iX DELETE http://localhost:1234/api/v1/clusters/user-1-2-c
#+END_SRC

NB: the rulelist, rule, and the route created implicitly by the listener will not be removed by the
above call, but this should make no harm.

* Protocol support

|------------------+-------------------+-----------------+------+------------------+---------+---------|
| Protocol         | Session ID        | Type            | Role | Mode             | Re/Lb   | Status  |
|------------------+-------------------+-----------------+------+------------------+---------+---------|
| UDP              | IP 5-tuple        | datagram-stream | l/c  | singleton/server | yes/yes | Full    |
| TCP              | IP 5-tuple        | byte-stream     | l/c  | server           | yes/yes | Full    |
| HTTP             | IP 5-tuple        | byte-stream     | l    | server           | yes/yes | Partial |
| WebSocket        | IP 5-tuple + HTTP | datagram-stream | l/c  | server           | yes/yes | Full    |
| STDIO-fork       | N/A               | byte-stream     | c    | singleton        | no/no   | Full    |
| UNIX/stream      | file desc/path    | byte-stream     | l/c  | server           | yes/yes | Full    |
| UNIX/dgram       | file desc/path    | datagram-stream | l/c  | singleton        | no/no   | TODO    |
| PIPE             | file desc/path    | byte-stream     | l/c  | singleton        | no/no   | TODO    |
| AF_PACKET        | file desc         | datagram-stream | l/c  | singleton        | no/no   | TODO    |
| INLINE/STDIO     | N/A               | byte-stream     | c    | singleton        | yes/no  | Full    |
| INLINE/Echo      | N/A               | datagram-stream | c    | singleton        | yes/no  | Full    |
| INLINE/Discard   | N/A               | datagram-stream | c    | singleton        | yes/no  | Full    |
| INLINE/Logger    | N/A               | datagram-stream | c    | singleton        | yes/no  | Full    |
| INLINE/JSONENcap | N/A               | datagram-stream | c    | singleton        | yes/no  | Full    |
| INLINE/JSONDecap | N/A               | datagram-stream | c    | singleton        | yes/no  | Full    |
|------------------+-------------------+-----------------+------+------------------+---------+---------|

** Protocols

- UDP "singleton mode" is a "connected" UDP server, while UDP "server mode" is a listener-only
  protocol that emits a new session for each packet received with a new IP 5-tuple
- STDIO-fork is a (transform-only) protocol for communicating with a forked process through
  STDIO/STDOUT
- Inline/STDIO pipes the stream to the l7mp proxy stdin/stdout, stream reads from stdin and write
  to stdout (useful for debugging)
- Inline/Echo is an Echo Cluster, writes back everything it reads (useful for debugging)
- Inline/Discard is blackholes everyting it received (useful for debugging)
- Inline/Logger is like an Echo Cluster, but it also writes everything that goes through it to a
  file or to the standard output (useful for debugging)

** Session id

A unique name/descriptor for a session, generated dynamically by the protocol's listener.

** Type

- byte-stream: segmentation/message boundaries not preserved
- datagram-stream segmentation/message boundaries preserved

Note that streams can run on top of datagram protocols but not the other way around; l7mp warns
when such a conversion is requested.

** Mode

- server: listen+accept -> new session
- singleton: can emit a single session only

** Role

- listener (l): protocol supports listeners to emit sessions
- cluster (c): protocol supports clusters to forward sessions to

** Re/To/Lb

- Re: Retries support, To: Timeout support, Lb: load-balance support

** Status

* License

Copyright 2019-2020 by its authors.  Some rights reserved. See AUTHORS.

MIT License
